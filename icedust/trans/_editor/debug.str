module _editor/debug

imports // constructors

  analysis2/constructors
  api/_runtime-constructors
  
imports // functions

  _editor/analysis
  api/_generated
  api/_runtime
  api/model-names-api
  api/module-api
  api/module-names-api
  desugaring/desugar
  lib/files
  lib/index
  lib/search
  prettyprinting/pp
  
rules // Debugging builders
  
  // Prints the abstract syntax ATerm of a selection.
  debug-show-aterm:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"aterm")> path;
      result   := selected

  // Prints the analyzed annotated abstract syntax ATerm of a selection.
  debug-show-desugared:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      ast'                    := <desugar-before-analysis> ast;
      filename := <guarantee-extension(|"desugared.aterm")> path;
      result   := ast'
      
  // Prints the analyzed annotated abstract syntax ATerm of a selection.
  debug-show-analyzed:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"analyzed.aterm")> path;
      result   := ast
  
  debug-show-analyzed-resolved0:
    (selected, position, ast, path, project-path) -> (filename, result)
      where
        language := <_language>
      with
        partition-path := <eclipse-path>path;
        <_analyze-all(desugar-before-analysis, id, pp-message-top|language)>[File(partition-path, ast, -1.0)] =>
          Result(
            post-trans-result*
          , messages-only-result*
          , affected-source*
          , debug-result
          , TimeResult(parse-time, pre-trans-time, collect-time, evaluate-time, post-trans-time, -1.0, -1.0)
          );
        [FileResult(source, initial-ast, analyzed-ast, error*, warning*, note*)] := post-trans-result*
      with
        filename := <guarantee-extension(|"analyzed.aterm")> path;
        ast''     := <bottomup(try(id{bottomup(try(_give-task-results))}))>analyzed-ast;
        ast'''   := <bottomup(try(id{bottomup(try(rm-annotations);try(_pp-uri;string-replace(|"\"","")))}))>ast'';
        result   := ast'''
  
  debug-show-analyzed-resolved:
    (selected, position, ast, path, project-path) -> (filename, result)
      where
        language := <_language>
//        ;
//        _index-setup(|language, project-path);
//        _task-setup(|project-path)
      with
        filename := <guarantee-extension(|"desugared.after.aterm")> path;
        ast'     := <bottomup(try(id{bottomup(try(_give-task-results))}))>ast;
        ast''     := <bottomup(try(id{bottomup(try(rm-annotations);try(_pp-uri;string-replace(|"\"","")))}))>ast';
        result   := ast''
        
  debug-show-analyzed-resolved2 = debug-show-analyzed-resolved;bottomup(try(no-use-def))
        
  no-use-def: a{Use(_)} -> a{}
  no-use-def: a{Def(_)} -> a{}

  debug-properties:
    (target, position, ast, path, project-path) -> (filename, result)
      where
        language := <_language>;
//        _index-setup(|language, project-path);
//        _task-setup(|project-path);
        filename := <guarantee-extension(|"properties.txt")> path;
        result:=
          <map(\(a,b)->$[[a]: [b]]\);try(separate-by(|"\n");concat-strings)>
          <_get-editor-properties(pp-partial-IceDust-string|<_language>,project-path)>target
  
  debug-show-desugared2:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"desugared.after.aterm")> path;
      ast'     := <bottomup(try(\a{_}->a{}\))>ast;
      result   := ast'
  
  debug-show-origin2:
    (selected, position, ast, path, project-path) -> None()
    with
      ast' := <desugar-before-analysis> ast;
      <_origin-debug-all>ast'
        
  debug-show-origin:
    (target, position, ast, path, project-path) -> None()
      with
        <_origin-debug-all>target
  
  debug-index-project =
    _analysis-debug-index-project(|<_language>)
  debug-index-project-resolve = 
    _analysis-debug-index-project-resolve(|<_language>)
     
  ignore-extension: (partition, index) -> (partition, index)
    where
      extension := <get-extension>partition;
      <not(elem)> (extension, <_ignore-extensions>)
      
  ignore-extension: (partition, index) -> (partition, index)
    where
      <not(get-extension)>partition
      
  debug-index-project-resolve-ast:
      (_, _, _, path, project-path) -> (filename, result)
      with
        language := <_language>;
//        _index-setup(|language, project-path);
//        _task-setup(|project-path);
        result-ast := <_index-get-all-partitions; map(\f -> (f, <_index-get-all-in-partition> f)\)>;
        result-ast' := <_beautify-indices> result-ast;
        filename := $[[project-path]/[<dirname> path]/index.project.aterm];
        result   := result-ast'
  debug-index-partition =
    _analysis-debug-index-partition(|<_language>)
  debug-index-selection-partition =
    _analysis-debug-index-partition-resolve(|<_language>)

  debug-task-project =
    _analysis-debug-task-project(|<_language>)
  debug-task-partition =
    _analysis-debug-task-partition(|<_language>)
  debug-task-selection =
    _analysis-debug-task-selection(|<_language>)
    
  debug-project =
    _analysis-debug-project(|<_language>)
  debug-partition =
    _analysis-debug-partition(|<_language>)
    
//  debug-reanalyze = 
//    _analysis-debug-reanalyze(|<_language>)

rules

  debug-dependson: (target, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"dependson.txt")> path;
      result := <module-get-modulename;modulename-get-arrinames;fmap(index-get-prop(|DependsOn());map(path-pp));concat-strings(|"\n")>ast

  debug-flowsto: (target, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"flowsto.txt")> path;
      result := <module-get-modulename;modulename-get-arrinames;fmap(index-get-prop(|FlowsTo());map(path-pp));concat-strings(|"\n")>ast
      
  debug-toposort: (target, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"toposort.aterm")> path;
      result := <module-get-modulename;modulename-get-toposort;map(map(pp-toposort))>ast

  pp-toposort: name -> (<index-get-prop(|TopoSort());Hd>name, $[[<attributename-get-entityname>name].[name]])

rules // test builders

  test-optimized-search:
    (selected, position, ast, path, project-path) -> (filename, result)
      with
        language := <_language>
//        ;
//        _index-setup(|language, project-path);
//        _task-setup(|project-path)
      with
        ext      := <get-extension> path;
        filename := <guarantee-extension(|"search.aterm")> path;
        if target-uri:= <_nabl-uri <+ nabl-get-name;_nabl-uri>selected then
          result := <uri-to-ast(|ast)>target-uri
        else
          <debug(!"This doesnt have a uri ")>selected;
          result := selected
        end
