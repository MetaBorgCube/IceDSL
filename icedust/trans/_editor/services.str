module _editor/services

imports // constructors

  signatures/Expressions-sig
  signatures/Types-sig
  analysis2/constructors
  api/_runtime-constructors
  desugaring/constructors
  
imports // functions

  api/_generated
  // analysis/rules
  analysis2/path
  api/_runtime
  lib/index
  lib/string
  prettyprinting/pp
  names/naming/names
  completion/IceDust-cp
  libspoofax/editor/completion/-
  
rules // Editor services
  
  // Resolves a reference when the user control-clicks or presses F3 in the editor.
  editor-resolve:
    (node, position, ast, path, project-path) -> definition
    where
      node' := <try(resolve-child)>node;
      definition := <_analysis-resolve(|<_language>,path)> node'
  
  resolve-child: NaBLHelp(name, _) -> name

  // Returns "hover help" information for a particular node in the editor.
  // For references, this rule is invoked using the resolved term.
  // http://yellowgrass.org/issue/Spoofax/84
  editor-hover:
    x@(target, position, ast, path, project-path) -> $[[warning][hoverinfo]]
    where
      <not(hover-parent-for)>target
    with
      if Def(_) := target then
        warning := "<b>Warning showing hover info of Definition instead of Use</b><br/><br/>"
      else
        warning := ""
      end
    with
      target' := <editor-service-target>x;
      hoverinfo := <editor-service-properties(|project-path);filter(_not-none);_properties-to-html>target'

  // Gathers the properties for the properties view.
  editor-properties:
    x@(target, position, ast, path, project-path) -> properties
    where
      language := <_language>
//      ;
//      _index-setup(|language, project-path);
//      _task-setup(|project-path)
    with
      target' := <editor-service-target>x;
      properties :=  <editor-service-properties(|project-path);bottomup(try(string-replace(|"\n", "")))>target'
      
  // Completes an identifier when the user presses control-space
  // (the completion identifier in the AST provides additional context information)
  editor-complete:
    (node, position, ast, path, project-path) -> proposals
    where
      proposals := <_analysis-propose-completions(|<_language>, project-path)> ast
  
  // Formats the program using a pretty printer    
  editor-format:
    (selected, position, ast, path, project-path) -> (path, result)
    with
//      ext      := <get-extension> path;
//      filename := <guarantee-extension(|$[pp.[ext]])> path;
      result   := <pp-debug> selected
   
rules // target of editor services

  editor-service-target: (target, position, ast, path, project-path) -> target'
    with
      if Some(a) := target then
        target' := a
      else
        target' := target
      end

  hover-parent-for: a -> a // for constructors with no children hover parent
    where
      [] := <get-arguments>a;
      <not(is-string)>a;
      <not(?False())>a;
      <not(?True())>a
  hover-parent-for: a -> a // for strings, hover parent if it is not a reference
    where
      <is-string>a;
      None() := <_ref-prop>a
  hover-parent-for: NaBLHelp(_,_) -> <id>

rules // properties for editor services
  
  editor-service-properties(|project-path): target -> properties'
    with
      property1* := <_get-all-editor-properties(pp-partial-IceDust-string;truncate-string(|200) |<_language>, project-path)>target;
      property2* := <manual-properties>target;
      properties' := [property1*,property2*]

  manual-properties : t -> props
    with
      t' := <try(nabl-get-name)>t;
      props :=
        <map(\(a,b)->(a,<pp-property>b)\);filter(_not-none)>
        [
          ("Depends on", <index-get-prop(|DependsOn());try(?[];!None()) <+ !None()>t'),
          ("Flows to  ", <index-get-prop(|FlowsTo())  ;try(?[];!None()) <+ !None()>t'),
          ("TopoSort  ", <index-get-prop(|TopoSort()) ;try(Hd); try(?[];!None()) <+ !None()>t')
        ]

  def-warning: Def(_) -> ("Warning!", "Showing hover info of Definition instead of Use")

rules // formatting for editor services

  pp-property : ZeroOrOne() -> "[0, 1], zero or one, maybe/nullable"
  pp-property : One()       -> "[1, 1], exactly one, required"
  pp-property : ZeroOrMore()-> "[0, n), zero or more, maybe/nullable"
  pp-property : OneOrMore()  -> "[1, n), one or more, required"

  pp-property = path-pp  
  // pp-property : Path(names) -> <concat-strings(|".")>names
  // pp-property : Inv(path)   -> $[(inv) [<pp-property>path]]
