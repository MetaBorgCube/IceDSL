module _notNaBL

imports // constructors

  signatures/Data-sig
  signatures/Execute-sig
  signatures/Expressions-sig
  signatures/Model-sig
  signatures/Types-sig
  api/constructors
  api/_runtime-constructors
  names/naming/names
  
imports // functions
  
  api/_runtime
  api/data-api
  api/model-api
  lib/string
  lib/nabl-ext //is not called, but calls unresolved-error, ns-conflict-error, ...

rules // unresolved references manual messages

  nabl-check-disable-unresolved = id
      
  unresolved-error: Ref(e)                      -> (e, [NablNsEntityInstance(), NablNsAttribute(), NablNsRole(), NablNsInverse(), NablNsShortcut()])
  unresolved-error: MemberAccess(_, e)          -> (e, [NablNsAttribute(), NablNsRole(), NablNsInverse(), NablNsShortcut()])
  unresolved-error: AttributeRef(e)             -> (e, [NablNsAttribute()])
  unresolved-error: RoleRef(e)                  -> (e, [NablNsRole()])
  unresolved-error: MemberRef(e)                -> (e, [NablNsAttribute(),NablNsShortcut()])
  unresolved-error: EntityRef(e)                -> (e, [NablNsEntity()])
  unresolved-error: EntityInstanceRef(e)        -> (e, [NablNsEntityInstance()])

  unresolved-error = where(is-role);?e;!(<role-get-type>e,       [NablNsEntity()])

rules // check if there are no name collisions in attributes, roles, inverses and shortcuts
  
  ns-conflict-error = ![
    [NablNsAttribute(), NablNsRole(), NablNsInverse(), NablNsShortcut()]
  ]
      
signature constructors

  EiAttr : Term
  EiRole : Term
  MemberType : Term
  Left : Term
  Right : Term
  
rules // check if entities have all the required attributes assigned
  
  contains-all-errors = ![
    ContainsAll(
      NablNsAttribute(),
      [
        (NablProp_derivation-type(), Normal()),
        (NablProp_multiplicity(), One())
      ],
      "ei-a1",
      "ei-a3",
      "ei-a4"
    )
  ]
  
  eval(|f) = where("ei-a1":=f); is-entityinstance
  eval(|f) = where("ei-a3":=f); entityinstance-get-membervalues;map(membervalue-get-membername)
  eval(|f) = where("ei-a4":=f); entityinstance-get-name

rules // check if Entity (not Relation) has no roles

  nabl-constraint(|ctx) =
    where(is-entity;entity-is-entitytype);
    entity-get-members;filter(is-role;_task-create-error(|ctx, ["An entity cannot have roles."]));fail

rules // check if Entity names start with a capital
      
  nabl-constraint(|ctx) =
    where(is-entity);
    entity-get-name;
    if not(first-is-upper) then _task-create-warning(|ctx, ["Entity type names must start with a capital."]) end;fail

rules // check that we do not assign to derived value attributes

  nabl-constraint(|ctx): m -> <fail>
    where
     is-membervalue
    with
      name          := <membervalue-get-membername>m;
      name-def-task := <_nabl-create-collectdefs(|ctx)>name;
      m-der-ty-task := <_get-or-create-property-task(|ctx, NablProp_derivation-type())>name-def-task;
      match-task    := <_nabl-prop-match(|NablProp_derivation-type(), ctx, Eq(), Derivation())>m-der-ty-task;
      msg           := ["Attribute ", name, " is a derived value."];
      <_task-create-error-on-success(|ctx, match-task, msg)>name

rules
  
  // FIXME: NaBL should have generated this  
  nabl-get-name : Entity(a, _, _) -> a
  nabl-get-name : FirstClassRelation(a, _, _) -> a
  
rules // disable messages for duplicate This (inside duplicate entities)
      
  nabl-check-disable-duplicate(|uri, ns):  name -> name
    where
      <eq>(ns, NablNsThis())
