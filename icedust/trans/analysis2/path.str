module analysis2/path

imports // constructors
  
  signatures/Expressions-sig
  analysis2/constructors

imports // functions

  api/expressions-names-api
  api/model-names-api
  lib/eq
  lib/index
  lib/string
  lib/traverse
  prettyprinting/pp
  typing/references-manual

signature constructors

  DependencyPath : String * Expr -> Path
  DataflowPath   : String * Expr -> Path

rules // Expr -> ([Expr], [Expr]) // path-based-abstract-interpretation of expressions

  expr-pathexprs: e@This()    -> ([e], [])
  expr-pathexprs: e@Ref(name) -> ([] , [])  where !name;not(is-attributename+is-relationname+is-rolename+is-inversename+is-shortcutname+is-varname)
  expr-pathexprs: e@Ref(name) -> ([e], [])
  
  expr-pathexprs: e@MemberAccess(expr, name) -> ([],  [])  where !name;not(is-attributename+is-relationname+is-rolename+is-inversename+is-shortcutname)
  expr-pathexprs: e@MemberAccess(expr, name) -> (p'*, q*)
    with
      (p*, q*)  := <expr-pathexprs>expr;
      p'*       := <map(pathexpr-extend(|name))>p*

  expr-pathexprs: e@If(e1, e2, e3) -> ([p2*,p3*], [p1*,q1*,q2*,q3*])
    with
      (p1*, q1*) := <expr-pathexprs>e1;
      (p2*, q2*) := <expr-pathexprs>e2;
      (p3*, q3*) := <expr-pathexprs>e3
      
  expr-pathexprs: e@Filter(e1, x, e2) -> ([p1*,p2'*], [q1*,q2'*])
    with
      (p1*, q1*) := <expr-pathexprs>e1;
      (p2*, q2*) := <expr-pathexprs>e2;
      p2'* := <fmap(pathexpr-replace(|x, p1*))>p2*;
      q2'* := <fmap(pathexpr-replace(|x, p1*))>q2*
      
  expr-pathexprs: e@Find(e1, x, e2) -> ([p1*,p2'*], [q1*,q2'*])
    with
      (p1*, q1*) := <expr-pathexprs>e1;
      (p2*, q2*) := <expr-pathexprs>e2;
      p2'* := <fmap(pathexpr-replace(|x, p1*))>p2*;
      q2'* := <fmap(pathexpr-replace(|x, p1*))>q2*

  expr-pathexprs = get-arguments;map(expr-pathexprs);unzip;all(concat) // literals, unops and binops

rules
  
  pathexpr-replace(|name, expr*) = ?expr2;!expr*;where(is-list);map(pathexpr-replace-internal(|name, expr2))
  
  pathexpr-replace-internal(|name, expr2) = ?expr;!expr2;pathexpr-replace(|name, expr)

  pathexpr-replace(|name, expr):   Ref(name2)         -> expr where <eq-no-anno(|name)>name2
  pathexpr-replace(|name, expr): e@Ref(_)             -> e
  pathexpr-replace(|name, expr):   MemberAccess(e, n) -> MemberAccess(<pathexpr-replace(|name, expr)>e, n)
  pathexpr-replace(|name, expr):   This()             -> This()
  
  pathexpr-extend(|name): expr -> MemberAccess(expr, name)
  
  pathexpr-shorten: MemberAccess(expr, name) -> expr // Expr -> Expr or fail
  
  pathexpr-shorten-safe =  pathexpr-shorten
  pathexpr-shorten-safe: Ref(_) -> This()
  
  pathexpr-shorten-refl-trans = reflexive-transitive-closure(pathexpr-shorten)
  
  pathexpr-remove-this: MemberAccess(This(), name) -> Ref(name)
  pathexpr-remove-this: MemberAccess(expr, name)   -> MemberAccess(<pathexpr-remove-this>expr, name)
  pathexpr-remove-this: e@Ref(name)                -> e
  pathexpr-remove-this: This()                     -> <fail> // partial function
  
  pathexpr-remove-shortcuts: MemberAccess(expr, name)   -> MemberAccess(MemberAccess(<pathexpr-remove-shortcuts>expr, inverseName), roleName) where <shortcutname-get-inverseandrolename>name => (inverseName, roleName)
  pathexpr-remove-shortcuts: MemberAccess(expr, name)   -> MemberAccess(<pathexpr-remove-shortcuts>expr, name)
  pathexpr-remove-shortcuts: e@Ref(name)                -> MemberAccess(Ref(inverseName), roleName)                                           where <shortcutname-get-inverseandrolename>name => (inverseName, roleName)
  pathexpr-remove-shortcuts: e@Ref(name)                -> e

  pathexpr-last: MemberAccess(expr, name) -> name
  pathexpr-last: Ref(name)                -> name
  
  pathexpr-first: MemberAccess(expr, name) -> <pathexpr-first>expr
  pathexpr-first: Ref(name)                -> name
  
  pathexpr-remove-first: MemberAccess(Ref(name), name2) -> Ref(name2)
  pathexpr-remove-first: MemberAccess(expr, name)       -> MemberAccess(<pathexpr-remove-first>expr, name)
  
  pathexpr-inverse: Ref(name)                  -> Ref(<try(name-get-inversename)>name)
  pathexpr-inverse: e@MemberAccess(expr, name) -> MemberAccess(<pathexpr-remove-first;pathexpr-inverse>e, <pathexpr-first;try(name-get-inversename)>e)

rules

  path(|origin): pathexpr -> DependencyPath(origin, pathexpr-analyzed)
    with
      pathexpr-analyzed := <analyse-post-analysis(|<attributename-get-entityname>origin)>pathexpr
  
  path-inverse: DependencyPath(origin, pathexpr) -> DataflowPath(inv-origin, inv-pathexpr-analyzed)
    with
      inv-origin := <pathexpr-last>pathexpr;
      if pathexpr-shortened := <pathexpr-shorten>pathexpr then
        inv-pathexpr := MemberAccess(<pathexpr-inverse>pathexpr-shortened, origin)
      else
        inv-pathexpr := Ref(origin)
      end;
      inv-pathexpr-analyzed := <analyse-post-analysis(|<attributename-get-entityname>inv-origin)>inv-pathexpr

  path-pp: DependencyPath(origin, pathexpr) -> $[[<attributename-get-entityname>origin].[origin] <- [<pp-partial-IceDust-string>pathexpr]]
  path-pp: DataflowPath  (origin, pathexpr) -> $[[<attributename-get-entityname>origin].[origin] -> [<pp-partial-IceDust-string>pathexpr]]
  
  path-store-on-origin: path@DependencyPath(origin, _) -> <index-store-prop(|DependsOn(), origin)>path
  path-store-on-origin: path@DataflowPath(  origin, _) -> <index-store-prop(|FlowsTo(),   origin)>path

  path-last = ?DependencyPath(_, <pathexpr-last>)
  path-last = ?DataflowPath  (_, <pathexpr-last>)
  
  path-pathexpr = ?DependencyPath(_, <id>)
  path-pathexpr = ?DataflowPath  (_, <id>)

signature constructors
  
  Path                  : PathOrigin * PathExpr -> Path
  PathExpr              : List(String)          -> PathExpr
  AttrOrigin            : String                -> PathOrigin
  RoleRelationOrigin    : String                -> PathOrigin
  RoleParticipantOrigin : String                -> PathOrigin

rules // Expr -> PathExpr

  expr-to-pathexpr: This()                   -> PathExpr([])
  expr-to-pathexpr: Ref(name)                -> PathExpr([name])
  expr-to-pathexpr: MemberAccess(expr, name) -> PathExpr([name*,name]) with <expr-to-pathexpr>expr => PathExpr(name*)

rules // PathExpr -> PathExpr
  
  pathexpr-no-shortcuts     = PathExpr( map(shortcutname-get-inverseandrolename;TupleToList<+MkSingleton);concat )
  
  pathexpr-reverse          = PathExpr( reverse;map(try(rolename-get-inversename<+inversename-get-rolename)) )
  
  pathexpr-add-start(|name) : PathExpr(name*)        -> PathExpr([name,name*])
  pathexpr-add-end(|name)   : PathExpr(name*)        -> PathExpr([name*,name])
  pathexpr-tail             : PathExpr([name|name*]) -> PathExpr(name*)
  
  pathexpr-remove-end       : PathExpr(names)        -> PathExpr(name*) with <split-last>names=>(name*,name)

rules // PathExpr -> Expr

  pathexpr-to-expr: PathExpr([])     -> This()  
  pathexpr-to-expr: PathExpr([name]) -> Ref(name)
  pathexpr-to-expr: PathExpr(names)  -> MemberAccess(expr, name) with <split-last>names=>(name*,name); <pathexpr-to-expr>PathExpr(name*) => expr

  pathexpr-to-expr(|subexpr): PathExpr([])     -> subexpr 
  pathexpr-to-expr(|subexpr): PathExpr([name]) -> MemberAccess(subexpr, name)
  pathexpr-to-expr(|subexpr): PathExpr(names)  -> MemberAccess(expr,    name) with <split-last>names=>(name*,name); <pathexpr-to-expr(|subexpr)>PathExpr(name*) => expr

rules // PathExpr -> String

  pathexpr-get-start        : PathExpr([name|_]) -> name
  pathexpr-get-last         = ?PathExpr(<last>)

  pathexpr-pp : PathExpr(names) -> <concat-strings(|".")>names

rules // Path -> Path or fail
  
  pathexpr-isvalid: p@PathExpr(names) -> p where <map(is-attributename <+ is-rolename <+ is-inversename <+ is-shortcutname)>names

rules // Expr -> Path
  
  expr-to-path(|name): expr -> Path(<name-to-pathorigin>name, <expr-to-pathexpr>expr)

rules // Path -> Expr
  
  path-to-expr:           Path(origin, pathexpr) -> <pathexpr-to-expr          ;analyse-post-analysis(|<pathorigin-get-name;attributename-get-entityname>origin)>pathexpr
  
  path-to-expr(|subexpr): Path(origin, pathexpr) -> <pathexpr-to-expr(|subexpr);analyse-post-analysis(|<pathorigin-get-name;attributename-get-entityname>origin)>pathexpr

rules // Path -> Path
  
  path-no-shortcuts = Path(id, pathexpr-no-shortcuts)
  
  path-reverse: Path(origin, pathexpr) -> Path(origin', pathexpr')
    with
      origin-name  := <pathorigin-get-name>origin;
      pathexpr-rev := <pathexpr-reverse>pathexpr;
      origin'      := <pathexpr-get-start;name-to-pathorigin>pathexpr-rev;
      pathexpr'    := <pathexpr-tail;pathexpr-add-end(|origin-name)>pathexpr-rev
  
  path-tail: Path(origin, pathexpr) -> Path(origin', pathexpr')
    with
      pathexpr' := <pathexpr-tail>pathexpr;
      origin'   := <pathexpr-get-start;name-to-pathorigin>pathexpr

  path-remove-end = Path(id, pathexpr-remove-end)

  path-store-on-origin(|property): path -> <index-store-prop(|property, <path-get-origin-name-r>path)>path

  path-prependorigin: Path(origin, pathexpr) -> Path(origin, <pathexpr-add-start(|<pathorigin-get-name>origin)>pathexpr)

rules // Path -> Path or fail
  
  path-isvalid: p@Path(_, pathexpr) -> p where <pathexpr-isvalid>pathexpr
  
  path-origin-is-attr    = where(?Path(<pathorigin-is-attr>,_))
  path-origin-is-role    = where(?Path(<pathorigin-is-role>,_))
  path-origin-is-inverse = where(?Path(<pathorigin-is-inverse>,_))

rules // Path -> String
  
  path-get-last = ?Path(_,<pathexpr-get-last>)
  
  path-get-origin-name = ?Path(<pathorigin-get-name>,_)

  path-get-origin-name-r = ?Path(<pathorigin-get-name-r>,_)
  
  path-pp: Path(origin, pathexpr) -> $[[<pathorigin-pp>origin] -> [<pathexpr-pp>pathexpr]]

rules // PathOrigin -> PathOrigin or fail
  
  pathorigin-is-attr    = ?AttrOrigin(_)
  pathorigin-is-role    = ?RoleRelationOrigin(_)
  pathorigin-is-inverse = ?RoleParticipantOrigin(_)

rules // String -> PathOrigin
  
  name-to-pathorigin = where(is-attributename);?name;!AttrOrigin(name)
  name-to-pathorigin = where(is-rolename)     ;?name;!RoleRelationOrigin(name)
  name-to-pathorigin = where(is-inversename)  ;?name;!RoleParticipantOrigin(<inversename-get-rolename>name)
  
rules // PathOrigin -> String
  
  pathorigin-get-name = ?AttrOrigin(<id>)
  pathorigin-get-name = ?RoleRelationOrigin(<id>)
  pathorigin-get-name = ?RoleParticipantOrigin(<rolename-get-inversename>)
  
  pathorigin-get-name-r = ?AttrOrigin(<id>)
  pathorigin-get-name-r = ?RoleRelationOrigin(<id>)
  pathorigin-get-name-r = ?RoleParticipantOrigin(<id>)
  
  pathorigin-pp: AttrOrigin(name)            -> $[[name]]
  pathorigin-pp: RoleRelationOrigin(name)    -> $[[name] (role)]
  pathorigin-pp: RoleParticipantOrigin(name) -> $[[name] (participant)]

rules // String -> String
  
  name-inverse = rolename-get-inversename
  name-inverse = inversename-get-rolename
  name-inverse = where(is-attributename);id
  
  name-pp-qualified: name -> $[[<attributename-get-entityname>name].[name]]

rules // Path -> [Path]
  
  path-all-tails : Path(_,PathExpr([])) -> []
  path-all-tails : path                 -> [path|<path-tail;path-all-tails>path]

rules // DataflowPath -> String

  dataflowpath-direct-ref: DataflowPath(_, Ref(y)) -> y
  