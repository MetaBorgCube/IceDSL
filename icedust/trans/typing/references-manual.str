module typing/references-manual

imports // constructors
  
  signatures/Expressions-sig
  signatures/Types-sig
  api/_runtime-constructors
  names/naming/names

imports // functions
  
  api/_runtime
  lib/annotations

rules
  
  analyse-post-analysis(|context): e -> e
    where
      <has-annotation(|Type())>e;
      <has-annotation(|NablProp_multiplicity())>e
  
  analyse-post-analysis(|context): e@This() -> e{(NablProp_multiplicity(), One()), (Type(), ty)}
    with
      ty := context
  
  analyse-post-analysis(|context): e@Ref(a) -> e{(NablProp_multiplicity(), mu), (Type(), ty)}
    with
      ty := <get-type2>a;
      mu := <get-multiplicity>a
      
  analyse-post-analysis(|context): e@MemberAccess(expr, member) -> MemberAccess(expr', member){(NablProp_multiplicity(), mu), (Type(), ty)}
    with
      expr'     := <analyse-post-analysis(|context)>expr;
      ty        := <get-type2>member;
      expr-mu   := <get-multiplicity>expr';
      member-mu := <get-multiplicity>member;
      mu        := <cartesian-product>(expr-mu, member-mu)

rules
  
  cartesian-product: (x-mu, y-mu) -> mu
    with
      if !x-mu;?One() ; !y-mu;?One()                then !One()        ;?mu else
      if (!x-mu;?ZeroOrOne() <+ !x-mu;?One()) ;
         (!y-mu;?ZeroOrOne() <+ !y-mu;?One())       then !ZeroOrOne()  ;?mu else
      if !x-mu;?ZeroOrMore() <+ !y-mu;?ZeroOrMore() then !ZeroOrMore() ;?mu else
      if !x-mu;?OneOrMore() ; !y-mu;?ZeroOrOne() <+
         !y-mu;?OneOrMore() ; !x-mu;?ZeroOrOne()    then !ZeroOrMore() ;?mu else
                                                         !OneOrMore()  ;?mu
      end
      end
      end
      end
rules