module analysis2/path

imports // constructors
  
  signatures/Expressions-sig
  analysis2/constructors

imports // functions

  analysis2/analyse-post-analysis
  api/expressions-names-api
  api/model-names-api
  lib/eq
  lib/index
  lib/nabl2
  lib/string
  lib/traverse
  prettyprinting/pp

signature constructors

  DependencyPath : String * Expr -> Path
  DataflowPath   : String * Expr -> Path

rules // Expr -> ([Expr], [Expr]) // path-based-abstract-interpretation of expressions

  expr-pathexprs: e@This()    -> ([e], [])
  expr-pathexprs: e@Ref(name) -> ([] , [])  where !name;not(is-attributename+is-relationname+is-rolename+is-inversename+is-shortcutname+is-varname)
  expr-pathexprs: e@Ref(name) -> ([e], [])
  
  expr-pathexprs: e@MemberAccess(expr, name) -> ([],  [])  where !name;not(is-attributename+is-relationname+is-rolename+is-inversename+is-shortcutname)
  expr-pathexprs: e@MemberAccess(expr, name) -> (p'*, q*)
    with
      (p*, q*)  := <expr-pathexprs>expr;
      p'*       := <map(pathexpr-extend(|name))>p*

  expr-pathexprs: e@If(e1, e2, e3) -> ([p2*,p3*], [p1*,q1*,q2*,q3*])
    with
      (p1*, q1*) := <expr-pathexprs>e1;
      (p2*, q2*) := <expr-pathexprs>e2;
      (p3*, q3*) := <expr-pathexprs>e3
      
  expr-pathexprs: e@Filter(e1, x, e2) -> ([p1*,p2'*], [q1*,q2'*])
    with
      (p1*, q1*) := <expr-pathexprs>e1;
      (p2*, q2*) := <expr-pathexprs>e2;
      p2'* := <fmap(pathexpr-replace(|x, p1*))>p2*;
      q2'* := <fmap(pathexpr-replace(|x, p1*))>q2*
      
  expr-pathexprs: e@Find(e1, x, e2) -> ([p1*,p2'*], [q1*,q2'*])
    with
      (p1*, q1*) := <expr-pathexprs>e1;
      (p2*, q2*) := <expr-pathexprs>e2;
      p2'* := <fmap(pathexpr-replace(|x, p1*))>p2*;
      q2'* := <fmap(pathexpr-replace(|x, p1*))>q2*

  expr-pathexprs = get-arguments;map(expr-pathexprs);unzip;all(concat) // literals, unops and binops

rules
  
  pathexpr-replace(|name, expr*) = ?expr2;!expr*;where(is-list);map(pathexpr-replace-internal(|name, expr2))
  
  pathexpr-replace-internal(|name, expr2) = ?expr;!expr2;pathexpr-replace(|name, expr)

  pathexpr-replace(|name, expr):   Ref(name2)         -> expr where <eq-no-anno(|name)>name2
  pathexpr-replace(|name, expr): e@Ref(_)             -> e
  pathexpr-replace(|name, expr):   MemberAccess(e, n) -> MemberAccess(<pathexpr-replace(|name, expr)>e, n)
  pathexpr-replace(|name, expr):   This()             -> This()
  
  pathexpr-extend(|name): expr -> MemberAccess(expr, name)
  
  pathexpr-shorten: MemberAccess(expr, name) -> expr // Expr -> Expr or fail
  
  pathexpr-shorten-safe =  pathexpr-shorten
  pathexpr-shorten-safe: Ref(_) -> This()
  
  pathexpr-shorten-refl-trans = reflexive-transitive-closure(pathexpr-shorten)
  
  pathexpr-remove-this: MemberAccess(This(), name) -> Ref(name)
  pathexpr-remove-this: MemberAccess(expr, name)   -> MemberAccess(<pathexpr-remove-this>expr, name)
  pathexpr-remove-this: e@Ref(name)                -> e
  pathexpr-remove-this: This()                     -> <fail> // partial function
  
  pathexpr-remove-shortcuts: MemberAccess(expr, name)   -> MemberAccess(MemberAccess(<pathexpr-remove-shortcuts>expr, inverseName), roleName) where <shortcutname-get-inverseandrolename>name => (inverseName, roleName)
  pathexpr-remove-shortcuts: MemberAccess(expr, name)   -> MemberAccess(<pathexpr-remove-shortcuts>expr, name)
  pathexpr-remove-shortcuts: e@Ref(name)                -> MemberAccess(Ref(inverseName), roleName)                                           where <shortcutname-get-inverseandrolename>name => (inverseName, roleName)
  pathexpr-remove-shortcuts: e@Ref(name)                -> e

  pathexpr-last: MemberAccess(expr, name) -> <get-decl(|"Member")>name
  pathexpr-last: Ref(name)                -> <get-decl(|"Member")>name
  
  pathexpr-first: MemberAccess(expr, name) -> <pathexpr-first>expr
  pathexpr-first: Ref(name)                -> name
  
  pathexpr-remove-first: MemberAccess(Ref(name), name2) -> Ref(name2)
  pathexpr-remove-first: MemberAccess(expr, name)       -> MemberAccess(<pathexpr-remove-first>expr, name)
  
  pathexpr-inverse: Ref(name)                  -> Ref(<try(name-get-inversename)>name)
  pathexpr-inverse: e@MemberAccess(expr, name) -> MemberAccess(<pathexpr-remove-first;pathexpr-inverse>e, <pathexpr-first;try(name-get-inversename)>e)

rules

  path(|origin): pathexpr -> DependencyPath(origin, pathexpr-analyzed)
    with
      pathexpr-analyzed := <analyse-post-analysis(|<attributename-get-entityname>origin)>pathexpr
  
  path-inverse: DependencyPath(origin, pathexpr) -> DataflowPath(inv-origin-def, inv-pathexpr-analyzed)
    with
      inv-origin := <pathexpr-last>pathexpr;
      inv-origin-def := <get-decl(|"Member")>inv-origin;
      if pathexpr-shortened := <pathexpr-shorten>pathexpr then
        inv-pathexpr := MemberAccess(<pathexpr-inverse>pathexpr-shortened, origin)
      else
        inv-pathexpr := Ref(origin)
      end;
      inv-pathexpr-analyzed := <analyse-post-analysis(|<attributename-get-entityname>inv-origin)>inv-pathexpr

  path-pp: DependencyPath(origin, pathexpr) -> $[[<attributename-get-entityname>origin].[origin] <- [<pp-partial-icedust2-string>pathexpr]]
  path-pp: DataflowPath  (origin, pathexpr) -> $[[<attributename-get-entityname>origin].[origin] -> [<pp-partial-icedust2-string>pathexpr]]
  
  path-store-on-origin: path@DependencyPath(origin, _) -> <index-add(|origin, DependsOn())>path
  path-store-on-origin: path@DataflowPath(  origin, _) -> <index-add(|origin, FlowsTo()  )>path

  path-last = ?DependencyPath(_, <pathexpr-last>)
  path-last = ?DataflowPath  (_, <pathexpr-last>)
  
  path-pathexpr = ?DependencyPath(_, <id>)
  path-pathexpr = ?DataflowPath  (_, <id>)

rules // DataflowPath -> String

  dataflowpath-direct-ref: DataflowPath(_, Ref(y)) -> y
  