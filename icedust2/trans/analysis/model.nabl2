module model

rules

  [[ Entity(e, as) ^ (module_scope) ]] :=
    distinct/name W(entity_scope)/Member | error "Duplicate attribute, relation, role, inverse, or shortcut names." @NAMES,
    Entity{e} <- module_scope,
    entity_scope ---> module_scope,
    Entity{e} ===> entity_scope,
    e_type == TEntity(Entity{e}),
    Entity{e} : e_type,

    e_type <test! IsType(),
    e_type <test! CanCompare(),
    TString() <cast! e_type,
    TNoValue() <sub! e_type,

    Entity{e}.ns := Entity(),
    Implicit{"this"} <- entity_scope,
    Implicit{"this"} : TEntity(Entity{e}),
    Map2 [[ as ^ (entity_scope, module_scope) ]],
    Entity2{e} -> module_scope,   // matches 0 or more times, one for each relation (like partial class definition)
    Entity2{e} <=I= entity_scope, // import all from that reference
    new entity_scope.

  [[ FirstClassRelation(e, as) ^ (module_scope) ]] := // identical to Entity
    distinct/name W(entity_scope)/Member | error "Duplicate attribute, relation, role, inverse, or shortcut names." @NAMES,
    Entity{e} <- module_scope,
    entity_scope ---> module_scope,
    Entity{e} ===> entity_scope,
    Entity{e} : TEntity(Entity{e}),
    Entity{e}.ns := Entity(),
    Implicit{"this"} <- entity_scope,
    Implicit{"this"} : TEntity(Entity{e}),
    Map2 [[ as ^ (entity_scope, module_scope) ]],
    Entity2{e} -> module_scope,
    Entity2{e} <=I= entity_scope,
    new entity_scope.
    
  [[ Attribute(a, t, m) ^ (entity_scope, module_scope) ]] :=
    Member{a} <- entity_scope,
    Member{a} : TTuple(a_type, a_mult, TOrdered()),
    Member{a}.ns := Attribute(),
    Member{a}.derivationtype := Normal(),
    Member{a}.reltype := None(),
    [[ t ^ (entity_scope) : a_type ]],
    [[ m ^ (entity_scope) : a_mult ]].
    
  [[ DerivationAttribute(a, t, m, e) ^ (entity_scope, module_scope) ]] :=
    a_ord == TOrdered(),
    Member{a} <- entity_scope,
    Member{a} : TTuple(a_type, a_mult, a_ord),
    Member{a}.ns := Attribute(),
    Member{a}.derivationtype := Derivation(),
    Member{a}.expr := e,
    Member{a}.reltype := None(),
    [[ t ^ (entity_scope) : a_type ]],
    [[ m ^ (entity_scope) : a_mult ]],
    [[ e ^ (entity_scope) : TTuple(e_type, e_mult, e_ord) ]],
    e_type <sub? a_type | error $[Type error: expected [a_type] got [e_type].]@e,
    (e_mult,e_ord) <mulOrd? (a_mult,a_ord) | error $[Multiplicity error: expected [(a_mult,a_ord)] got [(e_mult,e_ord)].]@e.
    
  [[ DefaultAttribute(a, t, m, e) ^ (entity_scope, module_scope) ]] :=
    a_ord == TOrdered(),
    Member{a} <- entity_scope,
    Member{a} : TTuple(a_type, a_mult, a_ord),
    Member{a}.ns := Attribute(),
    Member{a}.derivationtype := DefaultValue(),
    Member{a}.expr := e,
    Member{a}.reltype := None(),
    [[ t ^ (entity_scope) : a_type ]],
    [[ m ^ (entity_scope) : a_mult ]],
    [[ e ^ (entity_scope) : TTuple(e_type, e_mult, e_ord) ]],
    e_type <sub? a_type | error $[Type error: expected [a_type] got [e_type].]@e,
    (e_mult,e_ord) <mulOrd? (a_mult,a_ord) | error $[Multiplicity error: expected [(a_mult,a_ord)] got [(e_mult,e_ord)].]@e.
    
  [[ Relation(e1, r1, m1, o1, m2, o2, e2, r2) ^ (module_scope) ]] :=
    Entity2{e1} <- module_scope,
    Entity2{e1} ===> entity1_scope,
    Member{r1} <- entity1_scope,
    Entity{e1} -> module_scope,
    Entity{e1} |-> e1_def,
    e1_def : e1_type,
    [[m1 ^ (module_scope) : m1_mult ]],
    [[o1 ^ (module_scope) : o1_ord ]],
    Member{r1} : TTuple(e2_type, m1_mult, o1_ord),
    Member{r1}.ns := Relation(),
    Member{r1}.inverse := r2,
    Member{r1}.side := Left(),
    Member{r1}.reltype := None(),
    Entity2{e2} <- module_scope,
    Entity2{e2} ===> entity2_scope,
    Member{r2} <- entity2_scope,
    Entity{e2} -> module_scope,
    Entity{e2} |-> e2_def,
    e2_def : e2_type,
    [[m2 ^ (module_scope) : m2_mult ]],
    [[o2 ^ (module_scope) : o2_ord ]],
    Member{r2} : TTuple(e1_type, m2_mult, o2_ord),
    Member{r2}.ns := Relation(),
    Member{r2}.inverse := r1,
    Member{r2}.side := Right(),
    Member{r2}.reltype := None(),
    new entity1_scope,
    new entity2_scope.
    
  [[ Role(entity, inverse, mult, ord, role) ^ (entity_scope, module_scope) ]] :=
    [[ mult ^ (entity_scope) : inverse_mult ]],
    [[ ord  ^ (entity_scope) : inverse_ord  ]],
    Implicit{"this"} -> entity_scope,
    Implicit{"this"} |-> this_def,
    this_def : this_type,
    Member{role} <- entity_scope,
    Member{role} : TTuple(entity_type, TOne(), TOrdered()),
    Member{role}.ns := Role(),
    Member{role}.inversemult := inverse_mult,
    Member{role}.inverseord  := inverse_ord,
    Member{role}.inverse := inverse,
    Member{role}.reltype := None(),
    Entity{entity} -> entity_scope,
    Entity{entity} |-> entity_def,
    entity_def : entity_type,
    Entity2{entity} <- module_scope,
    Entity2{entity} ===> entity2_scope,
    Member{inverse} <- entity2_scope,
    Member{inverse} : TTuple(this_type, inverse_mult, inverse_ord),
    Member{inverse}.ns := Inverse(),
    Member{inverse}.role := role,
    Member{inverse}.reltype := None(),
    new entity2_scope,
    Member2{role} -> entity_scope,
    Member2{role} <=I= entity2_scope, // import all shortcut definitions from the role associated scope into the entity2 scope
    true.
    
  [[ Shortcut(role1, shortcut1, role2, shortcut2) ^ (entity_scope, module_scope) ]] :=
    Member{role1} -> entity_scope,
    Member{role1} |-> role1_def,
    role1_def : TTuple(role1_type, role1_mult, role1_ord),
    role1_def.inversemult := role1_inverse_mult,
    role1_def.inverseord  := role1_inverse_ord,
    Member2{role1} <- entity_scope,
    Member2{role1} ===> role1_scope,
    Member{shortcut1} <- role1_scope,
    Member{shortcut1} : TTuple(role2_type, role1_inverse_mult, role1_inverse_ord),
    Member{shortcut1}.ns := Shortcut(),
    Member{shortcut1}.reltype := this_type,
    Member{shortcut1}.originrole := role1,
    Member{shortcut1}.originrole2 := role2,
    new role1_scope,
    Member{role2} -> entity_scope,
    Member{role2} |-> role2_def,
    role2_def : TTuple(role2_type, role2_mult, role2_ord), 
    role2_def.inversemult := role2_inverse_mult,
    role2_def.inverseord  := role2_inverse_ord,
    Member2{role2} <- entity_scope,
    Member2{role2} ===> role2_scope,
    Member{shortcut2} <- role2_scope,
    Member{shortcut2} : TTuple(role1_type, role2_inverse_mult, role2_inverse_ord),
    Member{shortcut2}.ns := Shortcut(),
    Member{shortcut2}.reltype := this_type,
    Member{shortcut2}.originrole := role2,
    Member{shortcut2}.originrole2 := role1,
    new role2_scope,
    Implicit{"this"} -> entity_scope,
    Implicit{"this"} |-> this_def,
    this_def : this_type,
    true.
   